{"version":3,"file":"react-use-id-hook.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["import React, {\n\tFunctionComponent,\n\tcreateContext,\n\tuseContext,\n\tuseRef,\n} from 'react'\nimport PropTypes from 'prop-types'\n\nconst Id = createContext<() => string>(() => {\n\tthrow new TypeError('Please wrap your application with IdProvider')\n})\n\ntype IdState = {\n\tid: number\n\tget(): string\n}\nconst useIdGetter = (prefix = 'id') => {\n\tconst ref = useRef<IdState>()\n\tif (!ref.current) {\n\t\tconst me = {id: 0, get: () => `${prefix}-${me.id++}`}\n\t\tref.current = me\n\t}\n\treturn ref.current.get\n}\n\nexport const IdProvider: FunctionComponent = ({children}) => {\n\tconst get = useIdGetter()\n\treturn <Id.Provider value={get}>{children}</Id.Provider>\n}\nIdProvider.propTypes = {children: PropTypes.node.isRequired}\n\nexport const useId = () => {\n\tconst getter = useContext(Id)\n\tconst ref = useRef<string>()\n\tif (!ref.current) ref.current = getter()\n\treturn ref.current\n}\n\nexport const useGetId = () => {\n\tconst getter = useContext(Id)\n\tconst base = useRef<string>()\n\tif (!base.current) base.current = getter()\n\treturn useIdGetter(base.current)\n}\n"],"names":["Id","createContext","TypeError","useIdGetter","prefix","ref","useRef","current","me","id","get","IdProvider","children","React","Provider","value","propTypes","PropTypes","node","isRequired","getter","useContext","base"],"mappings":"4IAQMA,EAAKC,gBAA4B,iBAChC,IAAIC,UAAU,kDAOfC,EAAc,SAACC,YAAAA,IAAAA,EAAS,UACvBC,EAAMC,eACPD,EAAIE,QAAS,KACXC,EAAK,CAACC,GAAI,EAAGC,IAAK,kBAASN,MAAUI,EAAGC,OAC9CJ,EAAIE,QAAUC,SAERH,EAAIE,QAAQG,KAGPC,EAAgC,gBAAEC,IAAAA,SACxCF,EAAMP,WACLU,gBAACb,EAAGc,UAASC,MAAOL,GAAME,IAElCD,EAAWK,UAAY,CAACJ,SAAUK,EAAUC,KAAKC,kDASzB,eACjBC,EAASC,aAAWrB,GACpBsB,EAAOhB,kBACRgB,EAAKf,UAASe,EAAKf,QAAUa,KAC3BjB,EAAYmB,EAAKf,wBAXJ,eACda,EAASC,aAAWrB,GACpBK,EAAMC,kBACPD,EAAIE,UAASF,EAAIE,QAAUa,KACzBf,EAAIE"}