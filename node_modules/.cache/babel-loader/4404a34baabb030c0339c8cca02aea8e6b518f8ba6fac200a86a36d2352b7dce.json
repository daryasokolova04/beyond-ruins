{"ast":null,"code":"var _jsxFileName = \"/Users/darya/project/src/components/textField.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextField = ({\n  type,\n  label,\n  name,\n  value,\n  onChange,\n  error\n}) => {\n  _s();\n  const [showPassword, setShowPassword] = useState(false);\n  const handleChange = ({\n    target\n  }) => {\n    onChange({\n      name: target.name,\n      value: target.value\n    });\n  };\n\n  //   const renderClass = () => {\n  //     return \"form-control\" + (error ? \" is-invalid\" : \"\");\n  //   };\n\n  const toggleShowPassword = () => {\n    setShowPassword(prevState => !prevState);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mb-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: name,\n      className: \"form-label\",\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: showPassword ? \"text\" : type,\n      className: \"form-control\",\n      defaultValue: value,\n      onChange: handleChange,\n      name: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), type === \"password\" && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-outline-secondary\",\n      type: \"button\",\n      onClick: toggleShowPassword,\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"bi bi-eye\" + (showPassword ? \"-slash\" : \"\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"invalid-feedback\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(TextField, \"daguiRHWMFkqPgCh/ppD7CF5VuQ=\");\n_c = TextField;\nTextField.defaultProps = {\n  type: \"text\"\n};\nexport default TextField;\nvar _c;\n$RefreshReg$(_c, \"TextField\");","map":{"version":3,"names":["React","useState","PropTypes","jsxDEV","_jsxDEV","TextField","type","label","name","value","onChange","error","_s","showPassword","setShowPassword","handleChange","target","toggleShowPassword","prevState","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","defaultValue","onClick","_c","defaultProps","$RefreshReg$"],"sources":["/Users/darya/project/src/components/textField.jsx"],"sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst TextField = ({ type, label, name, value, onChange, error }) => {\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handleChange = ({ target }) => {\n    onChange({ name: target.name, value: target.value });\n  };\n\n  //   const renderClass = () => {\n  //     return \"form-control\" + (error ? \" is-invalid\" : \"\");\n  //   };\n\n  const toggleShowPassword = () => {\n    setShowPassword((prevState) => !prevState);\n  };\n\n  return (\n    <div className=\"mb-4\">\n      <label htmlFor={name} className=\"form-label\">\n        {label}\n      </label>\n      {/* has-validation\" */}\n      {/* <div className=\"input-group\"> */}\n      <input\n        type={showPassword ? \"text\" : type}\n        className={\"form-control\"}\n        defaultValue={value}\n        onChange={handleChange}\n        name={name}\n      />\n      {type === \"password\" && (\n        <button\n          className=\"btn btn-outline-secondary\"\n          type=\"button\"\n          onClick={toggleShowPassword}\n        >\n          <i className={\"bi bi-eye\" + (showPassword ? \"-slash\" : \"\")}></i>\n        </button>\n      )}\n      {error && <div className=\"invalid-feedback\">{error}</div>}\n      {/* </div> */}\n    </div>\n  );\n};\n\nTextField.defaultProps = {\n  type: \"text\",\n};\nexport default TextField;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,SAAS,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,SAAS,GAAGA,CAAC;EAAEC,IAAI;EAAEC,KAAK;EAAEC,IAAI;EAAEC,KAAK;EAAEC,QAAQ;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EACnE,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAEvD,MAAMc,YAAY,GAAGA,CAAC;IAAEC;EAAO,CAAC,KAAK;IACnCN,QAAQ,CAAC;MAAEF,IAAI,EAAEQ,MAAM,CAACR,IAAI;MAAEC,KAAK,EAAEO,MAAM,CAACP;IAAM,CAAC,CAAC;EACtD,CAAC;;EAED;EACA;EACA;;EAEA,MAAMQ,kBAAkB,GAAGA,CAAA,KAAM;IAC/BH,eAAe,CAAEI,SAAS,IAAK,CAACA,SAAS,CAAC;EAC5C,CAAC;EAED,oBACEd,OAAA;IAAKe,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACnBhB,OAAA;MAAOiB,OAAO,EAAEb,IAAK;MAACW,SAAS,EAAC,YAAY;MAAAC,QAAA,EACzCb;IAAK;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eAGRrB,OAAA;MACEE,IAAI,EAAEO,YAAY,GAAG,MAAM,GAAGP,IAAK;MACnCa,SAAS,EAAE,cAAe;MAC1BO,YAAY,EAAEjB,KAAM;MACpBC,QAAQ,EAAEK,YAAa;MACvBP,IAAI,EAAEA;IAAK;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CAAC,EACDnB,IAAI,KAAK,UAAU,iBAClBF,OAAA;MACEe,SAAS,EAAC,2BAA2B;MACrCb,IAAI,EAAC,QAAQ;MACbqB,OAAO,EAAEV,kBAAmB;MAAAG,QAAA,eAE5BhB,OAAA;QAAGe,SAAS,EAAE,WAAW,IAAIN,YAAY,GAAG,QAAQ,GAAG,EAAE;MAAE;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1D,CACT,EACAd,KAAK,iBAAIP,OAAA;MAAKe,SAAS,EAAC,kBAAkB;MAAAC,QAAA,EAAET;IAAK;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEtD,CAAC;AAEV,CAAC;AAACb,EAAA,CA1CIP,SAAS;AAAAuB,EAAA,GAATvB,SAAS;AA4CfA,SAAS,CAACwB,YAAY,GAAG;EACvBvB,IAAI,EAAE;AACR,CAAC;AACD,eAAeD,SAAS;AAAC,IAAAuB,EAAA;AAAAE,YAAA,CAAAF,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}